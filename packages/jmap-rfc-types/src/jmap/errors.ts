/**
 * [rfc8620 ยง 3.6.1](https://datatracker.ietf.org/doc/html/rfc8620#section-3.6.1)
 */
export enum RequestErrorProblemType {
  /**
   * The client included a capability in the `using` property of the
   * request that the server does not support.
   */
  UnknownCapability = "urn:ietf:params:jmap:error:unknownCapability",
  /**
   * The content type of the request was not "application/json" or the
   * request did not parse as I-JSON.
   */
  NotJSON = "urn:ietf:params:jmap:error:notJSON",
  /**
   * The request parsed as JSON but did not match the type signature of
   * the Request object.
   */
  NotRequest = "urn:ietf:params:jmap:error:notRequest",
  /**
   * The request was not processed as it would have exceeded one of the
   * request limits defined on the capability object, such as
   * maxSizeRequest, maxCallsInRequest, or maxConcurrentRequests.  A
   * "limit" property MUST also be present on the "problem details"
   * object, containing the name of the limit being applied.
   */
  Limit = "urn:ietf:params:jmap:error:limit"
}

/**
 * [rfc7807 ยง 3](https://datatracker.ietf.org/doc/html/rfc7807#section-3)
 */
export interface ProblemDetails {
  /**
   * A URI reference [RFC3986] that identifies the
   * problem type.  This specification encourages that, when
   * dereferenced, it provide human-readable documentation for the
   * problem type (e.g., using HTML [W3C.REC-html5-20141028]).  When
   * this member is not present, its value is assumed to be
   * "about:blank".
   */
  type: string | RequestErrorProblemType;
  /**
   * The HTTP status code ([RFC7231], Section 6)
   * generated by the origin server for this occurrence of the problem.
   */
  status?: number;
  /**
   * A human-readable explanation specific to this
   * occurrence of the problem.
   */
  detail?: string;
  /**
   * A URI reference that identifies the specific
   * occurrence of the problem.  It may or may not yield further
   * information if dereferenced.
   */
  instance?: string;
  methodCallId?: string;
  limit?: string;
}

/**
 * [rfc8620 ยง 3.6.2](https://datatracker.ietf.org/doc/html/rfc8620#section-3.6.2)
 *
 * If a method encounters an error, the appropriate "error" response
 * MUST be inserted at the current point in the `methodResponses` array
 * and, unless otherwise specified, further processing MUST NOT happen
 * within that method call.
 *
 * Any further method calls in the request MUST then be processed as
 * normal.  Errors at the method level MUST NOT generate an HTTP-level
 * error.
 *
 * Further possible errors for a particular method are specified in the
 * method descriptions.
 *
 * Further general errors MAY be defined in future RFCs.  Should a
 * client receive an error type it does not understand, it MUST treat it
 * the same as the `serverFail` type.
 */
export enum MethodErrorType {
  /**
   * Some internal server resource was temporarily
   * unavailable.  Attempting the same operation later (perhaps after a
   * backoff with a random factor) may succeed.
   */
  ServerUnavailable = "serverUnavailable",
  /**
   * An unexpected or unknown error occurred during the
   * processing of the call.  A `description` property should provide more
   * details about the error.  The method call made no changes to the
   * server's state.  Attempting the same operation again is expected to
   * fail again.  Contacting the service administrator is likely necessary
   * to resolve this problem if it is persistent.
   */
  ServerFail = "serverFail",
  /**
   * Some, but not all, expected changes described by
   * the method occurred.  The client MUST resynchronise impacted data to
   * determine server state.  Use of this error is strongly discouraged.
   */
  ServerPartialFail = "serverPartialFail",
  /**
   * The server does not recognise this method name.
   */
  UnknownMethod = "unknownMethod",
  /**
   * One of the arguments is of the wrong type or is
   * otherwise invalid, or a required argument is missing.  A
   * "description" property MAY be present to help debug with an
   * explanation of what the problem was.  This is a non-localised string,
   * and it is not intended to be shown directly to end users.
   */
  InvalidArguments = "invalidArguments",
  /**
   * The method used a result reference for one of its arguments
   * (see Section 3.7), but this failed to resolve.
   */
  InvalidResultReference = "invalidResultReference",
  /**
   * The method and arguments are valid, but executing the
   * method would violate an Access Control List (ACL) or other
   * permissions policy.
   */
  Forbidden = "forbidden",
  /**
   * The accountId does not correspond to a valid account.
   */
  AccountNotFound = "accountNotFound",
  /**
   * The accountId given corresponds to a valid account, but
   * the account does not support this method or data type.
   */
  AccountNotSupportedByMethod = "accountNotSupportedByMethod",
  /**
   * This method modifies state, but the account is read-only
   * (as returned on the corresponding Account object in the
   * JMAP Session resource).
   */
  AccountReadOnly = "accountReadOnly"
}
